#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int time[1005];
vector<int> a[1005];
int indegree[1005];
int result[1005];
int n, k;
void topology()
{
	queue<int> q;
	for (int i = 1; i <= n; i++)
	{
		result[i] = time[i];
	}
	for (int i = 1; i <= n; i++)
	{
		if (indegree[i] == 0)q.push(i);
	}

	while (!q.empty())
	{
		int node = q.front();
		q.pop();
		for (int i = 0; i < a[node].size(); i++)
		{
			int nextnode = a[node][i];
			indegree[nextnode]--;
			if (result[nextnode] < result[node] + time[nextnode])
			{
				result[nextnode] = result[node] + time[nextnode];
			}
			if (indegree[nextnode] == 0)
			{
				q.push(nextnode);
			}
		}

	}

}
int main()
{
	
	int test;
	cin >> test;
	for (int i = 0; i < test; i++)
	{
		cin >> n >> k;
		for (int i = 1; i <= n; i++)
		{
			cin >> time[i];
		}
		for (int i = 0; i < k; i++)
		{
			int n1, n2;
			cin >> n1 >> n2;
			a[n1].push_back(n2);
			indegree[n2]++;
		}
		int w;
		cin >> w;
		topology();
		printf("%d\n", result[w]);
		fill(indegree, indegree + n + 1, 0);
		for (int i = 1; i <= n; i++)
		{
			a[i].clear();
		}
	}
	return 0;
}
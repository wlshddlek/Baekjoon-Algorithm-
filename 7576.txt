#include<iostream>
#include<queue>
#include<algorithm>
using namespace std;
int n, m;
int map[1002][1002];
int dir[4][2] = { {-1,0},{0,1},{1,0},{0,-1} };
queue<pair<int, int>> q;
void bfs()
{
	while (!q.empty())
	{
		int x = q.front().first;
		int y = q.front().second;
		q.pop();
		for (int d = 0; d < 4; d++)
		{
			int nextx = x + dir[d][0];
			int nexty = y + dir[d][1];
			if (nextx < 0 || nexty < 0 || nextx >= n || nexty >= m)continue;
			if (map[nextx][nexty] != 0)continue;
			map[nextx][nexty] = map[x][y] + 1;
			q.push(make_pair(nextx, nexty));
		}
	}
}
int main()
{
	cin >> m >> n;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			cin >> map[i][j];
			if (map[i][j] == 1)q.push(make_pair(i, j)); //토마토 저장
		}
	}
	bfs();
	int maxx = 0;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			maxx = max(maxx, map[i][j]);
			if (map[i][j] == 0)
			{
				printf("-1");
				return 0;
			}
		}
	}
	printf("%d ", maxx-1);

	return 0;
}
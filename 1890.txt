#include<iostream>
#include<queue>;
#include<vector>
using namespace std;
priority_queue<pair<int, int>> q;
int buffer[105][105];
long long int dynamic[105][105];
bool check[105][105];
int dir[2][2] = { {0,1},{1,0} };
int n;
void bfs()
{
	q.push(make_pair(n - 1,n - 1));
	dynamic[n - 1][n - 1] = 1;
	while (!q.empty())
	{
		int x = q.top().first;
		int y = q.top().second;	
		q.pop();
		if (check[x][y] == true)continue;

			check[x][y] = true;
		for (int i = x; i >=0; i--)
		{
			for (int j = y; j>=0; j--)
			{
				if (i == x && j == y)continue;
				for (int k = 0; k < 2; k++)
				{					
					int newx = i + buffer[i][j]*dir[k][0];
					int newy = j + buffer[i][j]*dir[k][1];
					if (newx == x && newy == y)
					{
						dynamic[i][j]+=dynamic[x][y];
						q.push(make_pair(i, j));
					}
				}
			}
		}
	}
}
int main()
{
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			cin >> buffer[i][j];
		}
	}
	bfs();
	printf("%lld ", dynamic[0][0]);
	return 0;
}